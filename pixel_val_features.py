import fire
import os
import pandas as pd
import re
import glob
from PIL import Image
import numpy as np


def get_pixel_feature_vec(file_to_process, size, img_type):
    val = {}
    for file in file_to_process:
        img = Image.open(file)
        img_width, img_height = img.size
        img = img.crop(((img_width - size) // 2,
                        (img_height - size) // 2,
                        (img_width + size) // 2,
                        (img_height + size) // 2))
        val[os.path.basename(file).split(f'.{img_type}')[0]] = np.array(img).flatten()
    df = pd.DataFrame.from_dict(val, orient='index', columns=[f'pixel_val_{i}' for i in range(size**2*3)])
    # TODO: fix this so that patch order is right and the same way as for the imagenet features
    # TODO: normalize pixel values to range [0,1]?
    return df


def extract_pixel_features(imgs_folder: str, output_path: str, multifolder: bool = False, img_type: str = 'png',
                           overwrite: bool = False, crop: int = None):
    """
    This function creates a csv file with features generated by a forward pass through an ImageNet pre-trained network
    for given images.

    :param imgs_folder: string
        Path where the images are located. (also see multifolder argument to process multiple folders within a root folder)
    :param output_path: string
        Path where the feature csv file should be saved to.
    :param multifolder: bool (optional)
        Default False. Set if the specified imgs_path contains multiple folders with images, that should all be processed.
    :param img_type: string (optional)
        Default is "png". Image type to look for.
    :param overwrite: bool (optional)
        Default is False. If set to True, existing files will be overwritten.
    :param crop: int (optional)
        Default is None. If set, a centre crop will be generated from the patch of the specified size
    """

    if not os.path.isdir(output_path):
        os.mkdir(output_path)

    if not multifolder:
        subfolders = [imgs_folder]
    else:
        subfolders = [os.path.join(imgs_folder, o) for o in os.listdir(imgs_folder) if
                      os.path.isdir(os.path.join(imgs_folder, o))]

    for subfolder in subfolders:
        folder_name = os.path.basename(subfolder)
        csv_path = os.path.join(output_path, f'{folder_name}-pixel-val.csv')

        if not os.path.isfile(csv_path) or overwrite:
            print(f'Processing folder {folder_name}...')
            file_to_process = glob.glob(f'{subfolder}/*{img_type}')
            if crop is None:
                img = Image.open(file_to_process[0])
                crop, _ = img.size
            df = get_pixel_feature_vec(file_to_process, crop, img_type)

            # create the data frame and save it
            df.to_csv(csv_path)


if __name__ == '__main__':
    fire.Fire(extract_pixel_features)
